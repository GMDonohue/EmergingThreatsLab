service: smishing-archiving-api

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-1
  stage: dev 
  environment:
    DYNAMODB_TABLE_NAME: EmergingThreatsLabData
    S3_BUCKET_NAME: emerging-threats-image-bucket
  apiGateway:
    binaryMediaTypes:
      - multipart/form-data
    apiKeys: 
      - APIPhishingKey
  versionFunctions: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:Query
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:GetObject
            - s3:ListBucket
          Resource:
            - arn:aws:dynamodb:us-west-1:*:table/EmergingThreatsLabData
            - arn:aws:s3:::emerging-threats-image-bucket
            - arn:aws:s3:::emerging-threats-image-bucket/*

functions:
  uploadHandler:
    handler: backend/functions/publicUploadHandler.uploadImage
    events:
      - http:
          path: upload
          method: post
          cors: true
          private: true

  privateUploadHandler:
    handler: backend/functions/privateUploadHandler.uploadImage
    events:
      - http:
          path: private-upload
          method: post
          cors: true

resources:
  Resources:
    # S3 bucket configuration
    UploadsS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: emerging-threats-image-bucket
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "https://emergingthreats-frontend-bucket.s3.us-west-1.amazonaws.com"
              AllowedMethods:
                - GET
                - PUT
                - POST
              AllowedHeaders:
                - "*"

    UploadsS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: emerging-threats-image-bucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                AWS: arn:aws:iam::688567304941:role/smishing-archiving-api-dev-us-west-1-lambdaRole
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource: "arn:aws:s3:::emerging-threats-image-bucket/*"

    # # The API Key and Usage Plan are managed by Serverless
    # ApiGatewayApiKey:
    #   Type: AWS::ApiGateway::ApiKey  
    #   Properties:
    #     Name: 'APIPhishingKey'
    #     Enabled: true
    #     StageKeys:
    #       - RestApiId: !Ref ApiGatewayRestApi
    #         StageName: dev

    # ApiGatewayUsagePlan:
    #   Type: AWS::ApiGateway::UsagePlan  
    #   Properties:
    #     UsagePlanName: 'ImageUploadUsagePlan'
    #     ApiStages:
    #       - ApiId: !Ref ApiGatewayRestApi
    #         Stage: dev
    #     Throttle:
    #       BurstLimit: 100
    #       RateLimit: 50
    #     Quota:
    #       Limit: 10000
    #       Period: MONTH

    # ApiGatewayUsagePlanKey:
    #   Type: AWS::ApiGateway::UsagePlanKey
    #   Properties:
    #     KeyId: !Ref ApiGatewayApiKey
    #     KeyType: API_KEY
    #     UsagePlanId: !Ref ApiGatewayUsagePlan
